findMedianSortedArrays(int A[], int B[])
{
	m = A.length; n = B.length;
 	if ((m + n) % 2 != 0) 
	{// odd
		return  (findKthSmallest(A, B, (m + n) / 2, 0, m - 1, 0, n - 1));
	}
	else
 	{ // even
		return findKthSmallest(A, B, (m + n) / 2 - 1, 0, m - 1, 0, n - 1);
	}
}

findKthSmallest(int A[], int B[], int k, int aStart, int aEnd, int bStart, int bEnd) 
{ 
	aLen = aEnd - aStart + 1;
	bLen = bEnd - bStart + 1;
 
	// Handle special cases
	if (aLen == 0)
		return B[bStart + k];
	if (bLen == 0)
		return A[aStart + k];
	if (k == 0)
        {
         	if(A[aStart]<B[bStart]){
		Display that array is in A 
		Display aStart for index
		Display A[aStart] for value on index
	} 
        else
	{
             	Display that array is in B 
		Display bStart for index
		Display B[bStart] for value on index
	}
	return A[aStart] < B[bStart] ? A[aStart] : B[bStart];
}

int aMid = aLen * k / (aLen + bLen); // a's middle count
	int bMid = k - aMid - 1; // b's middle count
 
	// make aMid and bMid to be array index
	aMid = aMid + aStart;
	bMid = bMid + bStart;
 
	if (A[aMid] > B[bMid]) 
	{
		// search the kth smallest but eliminate the right half of A
		k = k - (bMid - bStart + 1);
		aEnd = aMid;
		bStart = bMid + 1;
	} 
	else 
	{
		// search (kâ€“(aMid-aStart+1)th smallest but eliminate the left half of B
		k = k - (aMid - aStart + 1);
		bEnd = bMid;
		aStart = aMid + 1;
	}
 	return findKthSmallest(A, B, k, aStart, aEnd, bStart, bEnd);
}
